version: '3.8'

services:
  auth:
    build: ./auth_service
    container_name: auth
    env_file:
      - auth_service/.env
    ports:
      - "${REST_AUTH_PORT}:${REST_AUTH_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  shoes:
    build: ./shoe_service
    container_name: shoes
    env_file:
      - shoe_service/.env
    ports:
      - "${GRPC_SHOE_PORT}:${GRPC_SHOE_PORT}"
      - "${REST_SHOE_PORT}:${REST_SHOE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  uploader:
    build: ./file_upload_service
    container_name: uploader
    env_file:
      - file_upload_service/.env
    ports:
      - "${GRPC_UPLOADER_PORT}:${GRPC_UPLOADER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  articles:
    build: ./article_service
    container_name: articles
    env_file:
      - article_service/.env
    ports:
      - "${REST_ARTICLE_PORT}:${REST_ARTICLE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres_container
    env_file:
      - auth_service/.env
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
