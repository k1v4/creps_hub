version: '3.8'

services:
  auth:
    build: ./auth_service
    container_name: auth
    env_file:
      - auth_service/.env
    ports:
      - "${REST_AUTH_PORT}:${REST_AUTH_PORT}"  # 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  shoes:
    build: ./shoe_service
    container_name: shoes
    env_file:
      - shoe_service/.env
    ports:
      - "${GRPC_SHOE_PORT}:${GRPC_SHOE_PORT}"  # 50052:50052
      - "${REST_SHOE_PORT}:${REST_SHOE_PORT}"  # 8081:8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  uploader:
    build: ./file_upload_service
    container_name: uploader
    env_file:
      - file_upload_service/.env
    ports:
      - "${GRPC_UPLOADER_PORT}:${GRPC_UPLOADER_PORT}"  # 50053:50053
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  articles:
    build: ./article_service
    container_name: articles
    env_file:
      - article_service/.env
    ports:
      - "${REST_ARTICLE_PORT}:${REST_ARTICLE_PORT}"  # 8082:8082
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  articles_replica:
    build: ./article_service
    container_name: articles_replica
    env_file:
      - article_service/.env
    environment:
      - REST_SERVER_PORT=8088
    ports:
      - "8088:8088"  # 8082:8082
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  releases:
    build: ./release_service
    container_name: releases
    env_file:
      - release_service/.env
    ports:
      - "${REST_RELEASE_PORT}:${REST_RELEASE_PORT}"  # 8083:8083
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres_container
    env_file:
      - auth_service/.env
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"  # 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis_container
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # 6379:6379
    volumes:
      - ./redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile_nginx
    container_name: nginx_container
    ports:
      - "80:80"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - articles
      - articles_replica
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge